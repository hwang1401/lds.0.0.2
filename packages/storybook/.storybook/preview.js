// üîß CSS Î≥ÄÏàòÎ•º Ìè¨Ìï®Ìïú Ïä§ÌÉÄÏùº ÏãúÌä∏ Í∞ÄÏ†∏Ïò§Í∏∞ (ÏàúÏÑú Ï§ëÏöî!)
import 'lumir-shared/dist/css/foundation-tokens.css';   // 1Ô∏è‚É£ Foundation ÌÜ†ÌÅ∞ Ï†ïÏùò (ÏµúÏö∞ÏÑ†)
import 'lumir-shared/dist/styles.css';                  // 2Ô∏è‚É£ Primitives CSS (Foundation ÌÜ†ÌÅ∞ Î≥ÄÏàò ÏÇ¨Ïö©)
// 3Ô∏è‚É£ System CSSÎäî ÎèôÏ†ÅÏúºÎ°ú Î°úÎìú

// üöÄ ÎèôÏ†Å CSS Î°úÎî© Ìï®Ïàò (Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ)
function loadSystemCSS(systemName) {
  if (typeof document === 'undefined') return Promise.resolve();
  
  return new Promise((resolve, reject) => {
    // 1Îã®Í≥Ñ: Í∏∞Ï°¥ ÏãúÏä§ÌÖú CSS Î™®Îëê Ï†úÍ±∞
    const existingLinks = document.querySelectorAll('[data-system-css]');
    existingLinks.forEach(link => {
      console.log(`üóëÔ∏è Í∏∞Ï°¥ CSS Ï†úÍ±∞: ${link.getAttribute('data-system-css')}`);
      link.remove();
    });
    
    // 2Îã®Í≥Ñ: CSS Î≥ÄÏàò Ï∫êÏãú Í∞ïÏ†ú Î¨¥Ìö®Ìôî
    document.documentElement.style.setProperty('--cache-buster', Date.now().toString());
    
    // 3Îã®Í≥Ñ: ÏÉà ÏãúÏä§ÌÖú CSS Î°úÎìú
    const link = document.createElement('link');
    link.rel = 'stylesheet'; 
    link.href = `/${systemName}/dist/css/tokens.css?v=${Date.now()}`;
    link.setAttribute('data-system-css', systemName);
    
    // 4Îã®Í≥Ñ: CSS Î°úÎìú ÏôÑÎ£å ÌõÑ Í≤ÄÏ¶ù
    link.onload = () => {
      console.log(`‚úÖ CSS Î°úÎìú ÏôÑÎ£å: ${systemName}`);
      
      // CSS Î≥ÄÏàòÍ∞Ä Ïã§Ï†úÎ°ú Ï†ÅÏö©ÎêòÏóàÎäîÏßÄ Í≤ÄÏ¶ù
      const primaryColor = getComputedStyle(document.documentElement)
        .getPropertyValue('--semantic-color-primary-background-1-rest').trim();
      
      console.log(`üé® Primary ÏÉâÏÉÅ ÌôïÏù∏: ${primaryColor}`);
      
      // Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅ Ìä∏Î¶¨Í±∞
      document.body.style.display = 'none';
      document.body.offsetHeight; // Í∞ïÏ†ú Î¶¨ÌîåÎ°úÏö∞
      document.body.style.display = '';
      
      // DOMÏóê ÏãúÏä§ÌÖú ÌÅ¥ÎûòÏä§ Ï∂îÍ∞Ä (Ï∂îÍ∞Ä Íµ¨Î∂Ñ)
      document.documentElement.className = `lumir-${systemName}`;
      
      resolve();
    };
    
    link.onerror = () => {
      console.error(`‚ùå CSS Î°úÎìú Ïã§Ìå®: ${systemName}`);
      reject(new Error(`Failed to load CSS for ${systemName}`));
    };
    
    // 5Îã®Í≥Ñ: head ÎÅùÏóê Ï∂îÍ∞ÄÌï¥ÏÑú Ïö∞ÏÑ†ÏàúÏúÑ ÌôïÎ≥¥
    document.head.appendChild(link);
    console.log(`üìù CSS Î°úÎìú ÏãúÏûë: ${systemName}`);
  });
}

// üéØ Global ÏãúÏä§ÌÖú Î≥ÄÍ≤Ω Í∞êÏßÄ
let currentSystem = 'system-01';

// Ï¥àÍ∏∞ ÏãúÏä§ÌÖú CSS Î°úÎìú
if (typeof document !== 'undefined') {
  console.log(`üéØ Ïä§ÌÜ†Î¶¨Î∂Å Ï¥àÍ∏∞Ìôî: Í∏∞Î≥∏ ÏãúÏä§ÌÖú = ${currentSystem}`);
  loadSystemCSS(currentSystem)
    .then(() => {
      console.log(`‚úÖ Ï¥àÍ∏∞ ÏãúÏä§ÌÖú Î°úÎìú ÏôÑÎ£å: ${currentSystem}`);
      
      // Ï¥àÍ∏∞ Î°úÎìú ÏôÑÎ£å ÌõÑ ÌòÑÏû¨ CSS Î≥ÄÏàò Í∞í ÌôïÏù∏
      setTimeout(() => {
        const primaryColor = getComputedStyle(document.documentElement)
          .getPropertyValue('--semantic-color-primary-background-1-rest').trim();
        console.log(`üé® Ï¥àÍ∏∞ Primary ÏÉâÏÉÅ: ${primaryColor}`);
        
        // DOM ÌÅ¥ÎûòÏä§ ÌôïÏù∏
        console.log(`üìã DOM ÌÅ¥ÎûòÏä§: ${document.documentElement.className}`);
        
        // Î°úÎìúÎêú CSS ÎßÅÌÅ¨ ÌôïÏù∏
        const systemCSS = document.querySelector('[data-system-css]');
        console.log(`üîó Î°úÎìúÎêú CSS: ${systemCSS ? systemCSS.getAttribute('data-system-css') : 'ÏóÜÏùå'}`);
      }, 500);
    })
    .catch(error => console.error(`‚ùå Ï¥àÍ∏∞ ÏãúÏä§ÌÖú Î°úÎìú Ïã§Ìå®: ${currentSystem}`, error));
}

// Ïä§ÌÜ†Î¶¨Î∂Å Ìà¥Î∞î Î≥ÄÍ≤Ω Í∞êÏßÄ - Îçî ÎÑìÏùÄ Î≤îÏúÑÏùò Ïù¥Î≤§Ìä∏ Í∞êÏßÄ
if (typeof window !== 'undefined') {
  // Î∞©Î≤ï 1: message Ïù¥Î≤§Ìä∏
  window.addEventListener('message', async (event) => {
    if (event.data?.type === 'storybook/globals/updated' && 
        event.data?.payload?.globals?.system &&
        event.data.payload.globals.system !== currentSystem) {
      
      currentSystem = event.data.payload.globals.system;
      console.log(`üöÄ ÏãúÏä§ÌÖú Î≥ÄÍ≤Ω ÏãúÏûë: ${currentSystem}`);
      
      try {
        await loadSystemCSS(currentSystem);
        console.log(`‚úÖ ÏãúÏä§ÌÖú Î≥ÄÍ≤Ω ÏôÑÎ£å: ${currentSystem}`);
      } catch (error) {
        console.error(`‚ùå ÏãúÏä§ÌÖú Î≥ÄÍ≤Ω Ïã§Ìå®: ${currentSystem}`, error);
      }
    }
  });
  
  // Î∞©Î≤ï 2: URL Î≥ÄÍ≤Ω Í∞êÏßÄ
  let lastUrl = window.location.href;
  const urlCheckInterval = setInterval(() => {
    const currentUrl = window.location.href;
    if (currentUrl !== lastUrl) {
      lastUrl = currentUrl;
      
      // URLÏóêÏÑú system ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÏ∂ú
      const urlParams = new URLSearchParams(window.location.search);
      const globalsParam = urlParams.get('globals');
      if (globalsParam) {
        const match = globalsParam.match(/system:([^&]+)/);
        if (match && match[1] !== currentSystem) {
          currentSystem = match[1];
          console.log(`üîÑ URL Î≥ÄÍ≤ΩÏúºÎ°ú ÏãúÏä§ÌÖú Î≥ÄÍ≤Ω ÏãúÏûë: ${currentSystem}`);
          
          loadSystemCSS(currentSystem)
            .then(() => console.log(`‚úÖ URL Í∏∞Î∞ò ÏãúÏä§ÌÖú Î≥ÄÍ≤Ω ÏôÑÎ£å: ${currentSystem}`))
            .catch(error => console.error(`‚ùå URL Í∏∞Î∞ò ÏãúÏä§ÌÖú Î≥ÄÍ≤Ω Ïã§Ìå®: ${currentSystem}`, error));
        }
      }
    }
  }, 100);
}

/** @type { import('@storybook/react').Preview } */
const preview = {
  parameters: {
    actions: { argTypesRegex: "^on[A-Z].*" },
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/i,
      },
    },
    docs: {
      toc: {
        disable: true,
      },
    },
    // Î∞∞Í≤ΩÏÉâ ÏÑ§Ï†ï
    backgrounds: {
      default: 'light',
      values: [
        {
          name: 'light',
          value: '#FFFFFF',
        },
        {
          name: 'subtle',
          value: '#F4F4F4',
        },
        {
          name: 'dark',
          value: '#333333',
        },
      ],
    },
    // Î∑∞Ìè¨Ìä∏ ÌÅ¨Í∏∞ ÏÑ§Ï†ï
    viewport: {
      viewports: {
        mobile: {
          name: 'Mobile',
          styles: {
            width: '360px',
            height: '640px',
          },
        },
        tablet: {
          name: 'Tablet',
          styles: {
            width: '768px',
            height: '1024px',
          },
        },
        desktop: {
          name: 'Desktop',
          styles: {
            width: '1366px',
            height: '900px',
          },
        },
      },
    },
  },
  globalTypes: {
    system: {
      description: 'Design System Selection',
      defaultValue: 'system-01',
      toolbar: {
        title: 'System',
        icon: 'component',
        items: [
          { value: 'system-01', title: 'System 01 - Clean & Efficient (ÌååÎûÄÏÉâ)' },
          { value: 'system-02', title: 'System 02 - Modern & Friendly (Ï¥àÎ°ùÏÉâ)' },
        ],
        dynamicTitle: true,
      },
    },
    theme: {
      description: 'Global theme for components',
      defaultValue: 'light',
      toolbar: {
        title: 'Theme',
        icon: 'circlehollow',
        items: ['light', 'dark'],
        dynamicTitle: true,
      },
    },
  },

};

export default preview; 